
--- START OF FILE: .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: ['react', '@typescript-eslint'],
  rules: {
    'react/react-in-jsx-scope': 'off',
  },
};
--- END OF FILE: .eslintrc.js ---


--- START OF FILE: .gitignore ---
node_modules
dist
.vscode
.DS_Store
.env
all_code_spex_core.txt
--- END OF FILE: .gitignore ---


--- START OF FILE: .prettierrc ---
{
  "singleQuote": true,
  "trailingComma": "all",
  "semi": true
}
--- END OF FILE: .prettierrc ---


--- START OF FILE: Makefile ---
# Makefile for the Spex Community Hub frontend application

# Use .PHONY to declare targets that are not actual files.
# This prevents conflicts if a file with the same name as a target exists.
.PHONY: help install dev build serve lint format test

# Default command to run when 'make' is called without arguments.
default: help

help:
	@echo "Available commands:"
	@echo "  install   - Install project dependencies from package.json"
	@echo "  dev       - Start the local development server (http://localhost:5173)"
	@echo "  run       - Alias for 'dev'"
	@echo "  build     - Build the application for production"
	@echo "  serve     - Serve the production build locally"
	@echo "  lint      - Run the ESLint linter"
	@echo "  format    - Format code with Prettier"
	@echo "  test      - Run the test suite with Vitest"

install:
	@echo "Installing dependencies..."
	npm install

# Start the development server
dev:
	npm run dev

# 'run' is a common command, so we add it as an alias for 'dev'.
run: dev

# Build the project for production
build:
	npm run build

# Preview the production build
serve:
	npm run serve

# Lint and format code
lint:
	npm run lint

format:
	npm run format

# Run tests
test:
	npm run test
--- END OF FILE: Makefile ---


--- START OF FILE: README.md ---
# Overview

OAuth:
https://github.com/settings/applications/3112265


--- END OF FILE: README.md ---


--- START OF FILE: index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BootCode Community Hub</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>
--- END OF FILE: index.html ---


--- START OF FILE: package.json ---
{
  "name": "spex-community-hub",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview",
    "lint": "eslint .",
    "format": "prettier --write .",
    "test": "vitest"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "clsx": "^2.1.0",
    "lucide-react": "^0.395.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.0",
    "tailwind-merge": "3.3.1",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@testing-library/react": "^14.1.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "postcss": "^8.5.6",
    "prettier": "^3.1.0",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.2.0",
    "vite": "^5.0.0",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^1.2.0"
  }
}

--- END OF FILE: package.json ---


--- START OF FILE: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- END OF FILE: postcss.config.js ---


--- START OF FILE: src/App.tsx ---
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { supabase } from './supabaseClient';
import { User as AppUser } from './types';
import { Session, User as SupabaseUser } from '@supabase/supabase-js';

import Navbar from 'components/Navbar';
import Home from 'pages/Home';
import SpecPage from 'pages/SpecPage';

const App: React.FC = () => {
  const [currentUser, setCurrentUser] = useState<AppUser | null>(null);

  useEffect(() => {
    // Check for an initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (session) {
        mapSupabaseUserToAppUser(session.user);
      }
    });

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        mapSupabaseUserToAppUser(session?.user ?? null);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const mapSupabaseUserToAppUser = (supabaseUser: SupabaseUser | null) => {
    if (supabaseUser) {
      const appUser: AppUser = {
        id: supabaseUser.id,
        username: supabaseUser.user_metadata.user_name || 'N/A',
        avatarUrl: supabaseUser.user_metadata.avatar_url || '',
      };
      setCurrentUser(appUser);
    } else {
      setCurrentUser(null);
    }
  };

  return (
    <Router>
      <div className="flex flex-col min-h-screen">
        <Navbar user={currentUser} />
        <main className="flex-grow">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/spec/:id" element={<SpecPage />} />
          </Routes>
        </main>
        <footer className="bg-primary text-white text-center p-4 mt-auto">
            Spex Community Hub Â© 2025
        </footer>
      </div>
    </Router>
  );
};

export default App;
--- END OF FILE: src/App.tsx ---


--- START OF FILE: src/components/Comment.tsx ---
import React from 'react';

interface CommentData {
  id: string;
  text: string;
  author: {
    username: string;
    avatar_url: string;
  };
}

interface CommentProps {
  comment: CommentData;
}

const Comment: React.FC<CommentProps> = ({ comment }) => {
  return (
    <div className="flex items-start mb-4">
      <img src={comment.author.avatar_url} alt={comment.author.username} className="w-8 h-8 rounded-full mr-2" />
      <div>
        <p className="font-bold">{comment.author.username}</p>
        <p>{comment.text}</p>
      </div>
    </div>
  );
};

export default Comment;
--- END OF FILE: src/components/Comment.tsx ---


--- START OF FILE: src/components/CommentForm.tsx ---
import React, { useState } from 'react';

interface CommentFormProps {
  onSubmit: (text: string) => void;
}

const CommentForm: React.FC<CommentFormProps> = ({ onSubmit }) => {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(text);
    setText('');
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col">
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        className="border p-2 rounded mb-2"
        placeholder="Write a comment..."
      />
      <button type="submit" className="bg-blue-500 text-white p-2 rounded">Submit</button>
    </form>
  );
};

export default CommentForm;
--- END OF FILE: src/components/CommentForm.tsx ---


--- START OF FILE: src/components/Navbar.test.tsx ---
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { MemoryRouter } from 'react-router-dom';
import Navbar from './Navbar';
import { supabase } from '../supabaseClient';

// Mock the supabase client
vi.mock('../supabaseClient', () => {
  return {
    supabase: {
      auth: {
        signInWithOAuth: vi.fn(),
        signOut: vi.fn(),
      },
    },
  };
});

describe('Navbar Component', () => {
  it('calls Supabase login when the login button is clicked', () => {
    // Render the Navbar in a logged-out state
    render(
      <MemoryRouter>
        <Navbar user={null} />
      </MemoryRouter>
    );

    // Find and click the login button
    const loginButton = screen.getByRole('button', { name: /login with github/i });
    fireEvent.click(loginButton);

    // Assert that the Supabase function was called correctly
    expect(supabase.auth.signInWithOAuth).toHaveBeenCalledWith({
      provider: 'github',
    });
  });

  it('displays user info and a logout button when a user is logged in', () => {
    const mockUser = {
      id: '123',
      username: 'test-user',
      avatarUrl: 'https://placehold.co/40x40',
    };

    // Render the Navbar in a logged-in state
    render(
      <MemoryRouter>
        <Navbar user={mockUser} />
      </MemoryRouter>
    );

    // Check for user info and logout button
    expect(screen.getByText('test-user')).toBeDefined();
    expect(screen.getByAltText('test-user')).toBeDefined();
    const logoutButton = screen.getByRole('button', { name: /sign out/i });
    expect(logoutButton).toBeDefined();

    // Click the logout button
    fireEvent.click(logoutButton);
    expect(supabase.auth.signOut).toHaveBeenCalled();
  });
});
--- END OF FILE: src/components/Navbar.test.tsx ---


--- START OF FILE: src/components/Navbar.tsx ---
import React from 'react';
import { Link } from 'react-router-dom';
import { User } from '../types';
import { supabase } from '../supabaseClient';

interface NavbarProps {
  user: User | null;
}

const Navbar: React.FC<NavbarProps> = ({ user }) => {
  const handleLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'github',
    });
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
  };

  return (
    <header className="bg-primary text-white">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/" className="text-xl font-bold">
          BootCode Hub
        </Link>
        <div className="flex items-center space-x-4">
          <Link to="/browse" className="hover:text-gray-300">Browse</Link>
          <Link to="/submit" className="hover:text-gray-300">Submit a Spec</Link>
          {user ? (
            <div className="flex items-center space-x-4">
              <img src={user.avatarUrl} alt={user.username} className="w-8 h-8 rounded-full" />
              <span>{user.username}</span>
              <button onClick={handleLogout} className="font-semibold hover:text-gray-300">
                Sign Out
              </button>
            </div>
          ) : (
            <button
              onClick={handleLogin}
              className="bg-accent hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Login with GitHub
            </button>
          )}
        </div>
      </nav>
    </header>
  );
};

export default Navbar;
--- END OF FILE: src/components/Navbar.tsx ---


--- START OF FILE: src/components/PluginCard.tsx ---
import React from 'react';

interface PluginSummary {
  id: string;
  name: string;
  description: string;
}

interface PluginCardProps {
  plugin: PluginSummary;
  onClick: (id: string) => void;
}

const PluginCard: React.FC<PluginCardProps> = ({ plugin, onClick }) => {
  return (
    <div className="border p-4 rounded-lg hover:shadow-lg" onClick={() => onClick(plugin.id)}>
      <h2 className="font-bold">{plugin.name}</h2>
      <p>{plugin.description}</p>
    </div>
  );
};

export default PluginCard;
--- END OF FILE: src/components/PluginCard.tsx ---


--- START OF FILE: src/components/SpecCard.tsx ---
import React from 'react';
import { Spec } from '../types';
import { Star, Code } from 'lucide-react';

interface SpecCardProps {
  spec: Spec;
  onClick: (id: string) => void;
}

const SpecCard: React.FC<SpecCardProps> = ({ spec, onClick }) => {
  return (
    <div 
      className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow cursor-pointer border border-medium-gray"
      onClick={() => onClick(spec.id)}
    >
      <div className="flex items-center mb-2">
        <Code className="mr-2 text-dark-gray" />
        <h3 className="font-bold text-xl text-primary">{spec.name}</h3>
      </div>
      <p className="text-dark-gray mb-4 h-12 overflow-hidden">{spec.description}</p>
      <div className="flex flex-wrap gap-2 mb-4">
        {spec.tags.slice(0, 3).map(tag => (
          <span key={tag} className="bg-gray-200 text-dark-gray text-xs font-semibold px-2.5 py-0.5 rounded-full">
            {tag}
          </span>
        ))}
      </div>
      <div className="flex justify-between items-center text-sm text-dark-gray border-t border-medium-gray pt-4">
        <div className="flex items-center">
            <img src={spec.author.avatarUrl} alt={spec.author.username} className="w-6 h-6 rounded-full mr-2" />
            <span>{spec.author.username}</span>
        </div>
        <div className="flex items-center">
          <Star size={16} className="text-yellow-500 mr-1" />
          <span>{spec.rating.toFixed(1)}</span>
        </div>
      </div>
    </div>
  );
};

export default SpecCard;

--- END OF FILE: src/components/SpecCard.tsx ---


--- START OF FILE: src/components/SpecDetailView.tsx ---
import React from 'react';

interface User {
  id: string;
  username: string;
  avatar_url: string;
}

interface SpecDetail {
  id: string;
  title: string;
  description: string;
  language: string;
  tags: string[];
  author: User;
  content: string;
}

interface SpecDetailViewProps {
  spec: SpecDetail;
}

const SpecDetailView: React.FC<SpecDetailViewProps> = ({ spec }) => {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">{spec.title}</h1>
      <p>{spec.description}</p>
      <pre className="bg-gray-100 p-4 rounded">{spec.content}</pre>
    </div>
  );
};

export default SpecDetailView;
--- END OF FILE: src/components/SpecDetailView.tsx ---


--- START OF FILE: src/data.ts ---
/**
 * @file Mock data for development.
 * In a real application, this would come from an API.
 */
import { Spec } from './types';

export const mockSpecs: Spec[] = [
  {
    id: 'pyspark-attribution-model',
    name: 'pyspark-attribution-model',
    author: {
      id: 'user1',
      username: 'data-dave',
      avatarUrl: 'https://placehold.co/40x40/232a31/white?text=DD',
    },
    description: 'A PySpark pipeline for marketing attribution analysis in e-commerce.',
    longDescription: 'This specification outlines a complete, production-grade PySpark pipeline designed for marketing attribution analysis. It follows the composable map-reduce pattern for efficiency and testability, making it ideal for large-scale e-commerce datasets. The model supports last-touch attribution and can be extended for other models.',
    language: 'pyspark',
    tags: ['pyspark', 'ecommerce', 'marketing', 'attribution', 'big-data'],
    rating: 4.5,
    totalRatings: 128,
    version: '1.2.3',
    lastUpdated: '2 weeks ago',
    githubUrl: 'https://github.com/example/pyspark-attribution',
    tomlContent: `
language = "pyspark"
project_type = "ecommerce_attribution"
description = "A PySpark pipeline for marketing attribution analysis."

[project]
name = "pyspark-attribution-project"
version = "1.2.3"

[[datasets]]
name = "ad_impressions"
description = "Records of which users saw which ads and when."
schema_or_sample = "impression_id STRING, user_id STRING"
    `.trim(),
    versionHistory: [
      { version: '1.2.3', date: '2025-07-21', commitHash: 'a1b2c3d', commitUrl: '#' },
      { version: '1.2.2', date: '2025-07-18', commitHash: 'e4f5g6h', commitUrl: '#' },
      { version: '1.1.0', date: '2025-06-30', commitHash: 'i7j8k9l', commitUrl: '#' },
      { version: '1.0.0', date: '2025-06-01', commitHash: 'm0n1p2q', commitUrl: '#' },
    ],
  },
  // Add more mock specs here to populate the list
];

--- END OF FILE: src/data.ts ---


--- START OF FILE: src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-light-gray text-primary antialiased;
}

--- END OF FILE: src/index.css ---


--- START OF FILE: src/index.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
--- END OF FILE: src/index.tsx ---


--- START OF FILE: src/pages/Home.tsx ---
import React from 'react';
import { useNavigate } from 'react-router-dom';
import SpecCard from '../components/SpecCard';
import { mockSpecs } from '../data';
import { Search, Package } from 'lucide-react';

const Home: React.FC = () => {
  const navigate = useNavigate();

  const handleSpecClick = (id: string) => {
    navigate(`/spec/${id}`);
  };

  return (
    <main>
      {/* Hero Section with Search */}
      <section className="bg-primary text-white py-20 px-4">
        <div className="container mx-auto text-center">
          <Package size={64} className="mx-auto mb-4" />
          <h1 className="text-4xl md:text-5xl font-bold mb-4">Find & Share Data Specs</h1>
          <p className="text-lg md:text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
            The central registry for high-quality, reusable code specifications and plugins.
          </p>
          <div className="max-w-2xl mx-auto">
            <div className="relative">
              <input
                type="text"
                placeholder="Search for specs (e.g., 'pyspark', 'ecommerce')..."
                className="w-full p-4 pr-12 text-lg text-primary rounded-md border-2 border-transparent focus:outline-none focus:border-accent"
              />
              <Search className="absolute top-1/2 right-4 -translate-y-1/2 text-gray-400" />
            </div>
          </div>
        </div>
      </section>

      {/* Top Ranked Specs Section */}
      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold text-center mb-10">Top Ranked Specs</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {mockSpecs.map((spec) => (
            <SpecCard key={spec.id} spec={spec} onClick={handleSpecClick} />
          ))}
        </div>
      </section>
    </main>
  );
};

export default Home;

--- END OF FILE: src/pages/Home.tsx ---


--- START OF FILE: src/pages/SpecPage.tsx ---
import React from 'react';
import { useParams } from 'react-router-dom';
import { mockSpecs } from '../data';
import SpecDetailView from '../components/SpecDetailView';
import { Star } from 'lucide-react';

const SpecPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const spec = mockSpecs.find((s) => s.id === id);

  if (!spec) {
    return (
      <div className="container mx-auto p-8 text-center">
        <h1 className="text-3xl font-bold text-primary mb-4">Spec Not Found</h1>
        <p className="text-dark-gray">The specification you are looking for does not exist.</p>
      </div>
    );
  }

  // The SpecDetailView component expects a slightly different data shape for its props.
  // We map our `Spec` object to the `SpecDetail` shape expected by the component.
  const specDetailForView = {
    id: spec.id,
    title: spec.name,
    description: spec.longDescription,
    language: spec.language,
    tags: spec.tags,
    author: {
        id: spec.author.id,
        username: spec.author.username,
        avatar_url: spec.author.avatarUrl,
    },
    content: spec.tomlContent,
  };

  return (
    <div className="container mx-auto p-4 md:p-8">
        <div className="bg-white p-6 rounded-lg shadow-md border border-medium-gray">
            <div className="flex justify-between items-start mb-4">
                <div>
                    <h1 className="text-3xl font-bold text-primary">{spec.name}</h1>
                    <div className="flex items-center text-dark-gray mt-2">
                        <img src={spec.author.avatarUrl} alt={spec.author.username} className="w-6 h-6 rounded-full mr-2" />
                        <span>{spec.author.username}</span>
                        <span className="mx-2">Â·</span>
                        <span>Version {spec.version}</span>
                        <span className="mx-2">Â·</span>
                        <span>Last updated {spec.lastUpdated}</span>
                    </div>
                </div>
                <div className="flex items-center bg-light-gray px-3 py-1 rounded-md">
                    <Star size={20} className="text-yellow-500 mr-2" />
                    <span className="font-bold text-lg">{spec.rating.toFixed(1)}</span>
                    <span className="text-sm text-dark-gray ml-1">({spec.totalRatings})</span>
                </div>
            </div>

            <div className="flex flex-wrap gap-2 mb-6">
                {spec.tags.map(tag => (
                <span key={tag} className="bg-gray-200 text-dark-gray text-xs font-semibold px-2.5 py-0.5 rounded-full">
                    {tag}
                </span>
                ))}
            </div>
            
            <SpecDetailView spec={specDetailForView} />
        </div>
    </div>
  );
};

export default SpecPage;
--- END OF FILE: src/pages/SpecPage.tsx ---


--- START OF FILE: src/supabaseClient.ts ---
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Supabase URL and Anon Key must be provided in .env file');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
--- END OF FILE: src/supabaseClient.ts ---


--- START OF FILE: src/types.ts ---
/**
 * @file Centralized type definitions for the application.
 */

export interface User {
    id: string;
    username: string;
    avatarUrl: string;
  }
  
  export interface VersionHistoryItem {
    version: string;
    date: string;
    commitHash: string;
    commitUrl: string;
  }
  
  export interface Spec {
    id: string;
    name: string;
    author: User;
    description: string;
    longDescription: string;
    language: string;
    tags: string[];
    rating: number;
    totalRatings: number;
    version: string;
    lastUpdated: string;
    githubUrl: string;
    tomlContent: string;
    versionHistory: VersionHistoryItem[];
  }
  
--- END OF FILE: src/types.ts ---


--- START OF FILE: tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        'primary': '#232a31',
        'secondary': '#313a43',
        'accent': '#c53929',
        'light-gray': '#f6f8fa',
        'medium-gray': '#e1e4e8',
        'dark-gray': '#586069',
      },
      fontFamily: {
        sans: ['"Inter"', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

--- END OF FILE: tailwind.config.js ---


--- START OF FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@/*": [
        "*"
      ]
    },
    "strict": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
--- END OF FILE: tsconfig.json ---


--- START OF FILE: tsconfig.node.json ---
{
    "compilerOptions": {
      "composite": true,
      "skipLibCheck": true,
      "module": "ESNext",
      "moduleResolution": "bundler"
    },
    "include": ["vite.config.mts"]
  }
--- END OF FILE: tsconfig.node.json ---


--- START OF FILE: vite.config.mts ---
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tsconfigPaths from 'vite-tsconfig-paths';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  build: {
    target: 'esnext',
  },
});
--- END OF FILE: vite.config.mts ---
