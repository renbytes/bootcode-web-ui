
--- START OF FILE: .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: ['react', '@typescript-eslint'],
  rules: {
    'react/react-in-jsx-scope': 'off',
  },
};
--- END OF FILE: .eslintrc.js ---


--- START OF FILE: .gitignore ---
node_modules
dist
.vscode
.DS_Store
.env
all_code_boot_core.txt
--- END OF FILE: .gitignore ---


--- START OF FILE: .prettierrc ---
{
  "singleQuote": true,
  "trailingComma": "all",
  "semi": true
}
--- END OF FILE: .prettierrc ---


--- START OF FILE: Makefile ---
# Makefile for the BootCode Community Hub frontend application

# Use .PHONY to declare targets that are not actual files.
# This prevents conflicts if a file with the same name as a target exists.
.PHONY: help install dev build serve lint format test

# Default command to run when 'make' is called without arguments.
default: help

help:
	@echo "Available commands:"
	@echo "  install   - Install project dependencies from package.json"
	@echo "  dev       - Start the local development server (http://localhost:5173)"
	@echo "  run       - Alias for 'dev'"
	@echo "  build     - Build the application for production"
	@echo "  serve     - Serve the production build locally"
	@echo "  lint      - Run the ESLint linter"
	@echo "  format    - Format code with Prettier"
	@echo "  test      - Run the test suite with Vitest"

install:
	@echo "Installing dependencies..."
	npm install

# Start the development server
dev:
	npm run dev

# 'run' is a common command, so we add it as an alias for 'dev'.
run: dev

# Build the project for production
build:
	npm run build

# Preview the production build
serve:
	npm run serve

# Lint and format code
lint:
	npm run lint

format:
	npm run format

# Run tests
test:
	npm run test
--- END OF FILE: Makefile ---


--- START OF FILE: README.md ---
# Overview

OAuth:
https://github.com/settings/applications/3112265

supabase link --project-ref fgcuyeytouwpsehhoisf
--- END OF FILE: README.md ---


--- START OF FILE: index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BootCode Community Hub</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>
--- END OF FILE: index.html ---


--- START OF FILE: package.json ---
{
  "name": "bootcode-community-hub",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview",
    "lint": "eslint .",
    "format": "prettier --write .",
    "test": "vitest"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "clsx": "^2.1.0",
    "lucide-react": "^0.395.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^6.22.0",
    "tailwind-merge": "3.3.1",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/react": "^14.1.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "postcss": "^8.5.6",
    "prettier": "^3.1.0",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.2.0",
    "vite": "^5.0.0",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^1.2.0"
  }
}

--- END OF FILE: package.json ---


--- START OF FILE: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- END OF FILE: postcss.config.js ---


--- START OF FILE: src/App.tsx ---
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { supabase } from './supabaseClient';
import { User as AppUser } from './types';
import { User as SupabaseUser } from '@supabase/supabase-js';

import Navbar from 'components/Navbar';
import Home from 'pages/Home';
import SpecPage from 'pages/SpecPage';
import BrowsePage from 'pages/BrowsePage';
import SubmitPage from 'pages/SubmitPage'; // Renamed
import PluginPage from 'pages/PluginPage'; // You would create this next


const App: React.FC = () => {
  const [currentUser, setCurrentUser] = useState<AppUser | null>(null);

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (session) {
        mapSupabaseUserToAppUser(session.user);
      }
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        mapSupabaseUserToAppUser(session?.user ?? null);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const mapSupabaseUserToAppUser = async (supabaseUser: SupabaseUser | null) => {
    if (supabaseUser) {
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('username, avatar_url')
            .eq('id', supabaseUser.id)
            .single();

        if (error && error.code !== 'PGRST116') {
            console.error('Error fetching profile:', error);
        }

      const appUser: AppUser = {
        id: supabaseUser.id,
        username: profile?.username || supabaseUser.user_metadata.user_name || 'N/A',
        avatarUrl: profile?.avatar_url || supabaseUser.user_metadata.avatar_url || '',
      };
      setCurrentUser(appUser);
    } else {
      setCurrentUser(null);
    }
  };

  return (
    <Router>
      <div className="flex flex-col min-h-screen bg-light-gray font-sans">
        <Navbar user={currentUser} />
        <main className="flex-grow">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/spec/:id" element={<SpecPage />} />
            <Route path="/plugin/:id" element={<PluginPage />} />
            <Route path="/browse" element={<BrowsePage />} />
            <Route path="/submit" element={<SubmitPage />} />
          </Routes>
        </main>
        <footer className="bg-primary text-white text-center p-4 mt-auto">
            BootCode Community Hub Â© 2025
        </footer>
      </div>
    </Router>
  );
};

export default App;

--- END OF FILE: src/App.tsx ---


--- START OF FILE: src/components/Comment.tsx ---
import React from 'react';

interface CommentData {
  id: string;
  text: string;
  author: {
    username: string;
    avatar_url: string;
  };
}

interface CommentProps {
  comment: CommentData;
}

const Comment: React.FC<CommentProps> = ({ comment }) => {
  return (
    <div className="flex items-start mb-4">
      <img src={comment.author.avatar_url} alt={comment.author.username} className="w-8 h-8 rounded-full mr-2" />
      <div>
        <p className="font-bold">{comment.author.username}</p>
        <p>{comment.text}</p>
      </div>
    </div>
  );
};

export default Comment;
--- END OF FILE: src/components/Comment.tsx ---


--- START OF FILE: src/components/CommentForm.tsx ---
import React, { useState } from 'react';

interface CommentFormProps {
  onSubmit: (text: string) => void;
}

const CommentForm: React.FC<CommentFormProps> = ({ onSubmit }) => {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(text);
    setText('');
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col">
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        className="border p-2 rounded mb-2"
        placeholder="Write a comment..."
      />
      <button type="submit" className="bg-blue-500 text-white p-2 rounded">Submit</button>
    </form>
  );
};

export default CommentForm;
--- END OF FILE: src/components/CommentForm.tsx ---


--- START OF FILE: src/components/Navbar.test.tsx ---
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { MemoryRouter } from 'react-router-dom';
import Navbar from './Navbar';
import { supabase } from '../supabaseClient';

// Mock the supabase client
vi.mock('../supabaseClient', () => {
  return {
    supabase: {
      auth: {
        signInWithOAuth: vi.fn(),
        signOut: vi.fn(),
      },
    },
  };
});

describe('Navbar Component', () => {
  it('calls Supabase login when the login button is clicked', () => {
    // Render the Navbar in a logged-out state
    render(
      <MemoryRouter>
        <Navbar user={null} />
      </MemoryRouter>
    );

    // Find and click the login button
    const loginButton = screen.getByRole('button', { name: /login with github/i });
    fireEvent.click(loginButton);

    // Assert that the Supabase function was called correctly
    expect(supabase.auth.signInWithOAuth).toHaveBeenCalledWith({
      provider: 'github',
    });
  });

  it('displays user info and a logout button when a user is logged in', () => {
    const mockUser = {
      id: '123',
      username: 'test-user',
      avatarUrl: 'https://placehold.co/40x40',
    };

    // Render the Navbar in a logged-in state
    render(
      <MemoryRouter>
        <Navbar user={mockUser} />
      </MemoryRouter>
    );

    // Check for user info and logout button
    expect(screen.getByText('test-user')).toBeDefined();
    expect(screen.getByAltText('test-user')).toBeDefined();
    const logoutButton = screen.getByRole('button', { name: /sign out/i });
    expect(logoutButton).toBeDefined();

    // Click the logout button
    fireEvent.click(logoutButton);
    expect(supabase.auth.signOut).toHaveBeenCalled();
  });
});
--- END OF FILE: src/components/Navbar.test.tsx ---


--- START OF FILE: src/components/Navbar.tsx ---
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { User } from '../types';
import { supabase } from '../supabaseClient';
import { ChevronDown, FileText, Plug } from 'lucide-react';

/**
 * A dropdown menu component that appears on hover.
 * The main title is a link, and the children are the dropdown items.
 * @param {object} props - The component props.
 * @param {React.ReactNode} props.children - The items to display in the dropdown.
 */
const Dropdown: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div 
      className="relative"
      onMouseEnter={() => setIsOpen(true)}
      onMouseLeave={() => setIsOpen(false)}
    >
      {/* The main "Browse" text is now a link that also acts as the hover trigger */}
      <Link to="/browse" className="flex items-center hover:text-gray-300 focus:outline-none">
        Browse
        <ChevronDown size={16} className={`ml-1 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} />
      </Link>
      
      {/* The dropdown menu appears below the link */}
      {isOpen && (
        <div 
          className="absolute mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50"
        >
          {children}
        </div>
      )}
    </div>
  );
};


interface NavbarProps {
  user: User | null;
}

const Navbar: React.FC<NavbarProps> = ({ user }) => {
  const handleLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'github',
    });
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
  };

  return (
    <header className="bg-primary text-white shadow-md">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/" className="text-xl font-bold hover:text-gray-300 transition-colors">
          BootCode Hub
        </Link>
        <div className="flex items-center space-x-6">
          {/* The Dropdown component now encapsulates the browse link and its menu */}
          <Dropdown>
            <Link to="/browse?type=specs" className="flex items-center px-4 py-2 text-sm text-primary hover:bg-light-gray">
              <FileText size={16} className="mr-2"/> Specs
            </Link>
            <Link to="/browse?type=plugins" className="flex items-center px-4 py-2 text-sm text-primary hover:bg-light-gray">
              <Plug size={16} className="mr-2"/> Plugins
            </Link>
          </Dropdown>
          <Link to="/submit" className="hover:text-gray-300">Submit</Link>
          
          {user ? (
            <div className="flex items-center space-x-4">
              <img src={user.avatarUrl} alt={user.username} className="w-8 h-8 rounded-full border-2 border-accent" />
              <span className="font-semibold">{user.username}</span>
              <button onClick={handleLogout} className="font-semibold hover:text-gray-300">
                Sign Out
              </button>
            </div>
          ) : (
            <button
              onClick={handleLogin}
              className="bg-accent hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors"
            >
              Login with GitHub
            </button>
          )}
        </div>
      </nav>
    </header>
  );
};

export default Navbar;

--- END OF FILE: src/components/Navbar.tsx ---


--- START OF FILE: src/components/PluginCard.tsx ---
import React from 'react';

interface PluginSummary {
  id: string;
  name: string;
  description: string;
}

interface PluginCardProps {
  plugin: PluginSummary;
  onClick: (id: string) => void;
}

const PluginCard: React.FC<PluginCardProps> = ({ plugin, onClick }) => {
  return (
    <div className="border p-4 rounded-lg hover:shadow-lg" onClick={() => onClick(plugin.id)}>
      <h2 className="font-bold">{plugin.name}</h2>
      <p>{plugin.description}</p>
    </div>
  );
};

export default PluginCard;
--- END OF FILE: src/components/PluginCard.tsx ---


--- START OF FILE: src/components/SpecCard.tsx ---
import React from 'react';
import { Spec } from '../types';
import { Star, Code } from 'lucide-react';

interface SpecCardProps {
  spec: Spec;
  onClick: (id: string) => void;
}

const SpecCard: React.FC<SpecCardProps> = ({ spec, onClick }) => {
  return (
    <div 
      className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow cursor-pointer border border-medium-gray"
      onClick={() => onClick(spec.id)}
    >
      <div className="flex items-center mb-2">
        <Code className="mr-2 text-dark-gray" />
        <h3 className="font-bold text-xl text-primary">{spec.name}</h3>
      </div>
      <p className="text-dark-gray mb-4 h-12 overflow-hidden">{spec.description}</p>
      <div className="flex flex-wrap gap-2 mb-4">
        {spec.tags.slice(0, 3).map(tag => (
          <span key={tag} className="bg-gray-200 text-dark-gray text-xs font-semibold px-2.5 py-0.5 rounded-full">
            {tag}
          </span>
        ))}
      </div>
      <div className="flex justify-between items-center text-sm text-dark-gray border-t border-medium-gray pt-4">
        <div className="flex items-center">
            <img src={spec.author.avatarUrl} alt={spec.author.username} className="w-6 h-6 rounded-full mr-2" />
            <span>{spec.author.username}</span>
        </div>
        <div className="flex items-center">
          <Star size={16} className="text-yellow-500 mr-1" />
          <span>{spec.rating.toFixed(1)}</span>
        </div>
      </div>
    </div>
  );
};

export default SpecCard;

--- END OF FILE: src/components/SpecCard.tsx ---


--- START OF FILE: src/components/SpecDetailView.tsx ---
import React from 'react';

interface User {
  id: string;
  username: string;
  avatar_url: string;
}

interface SpecDetail {
  id: string;
  title: string;
  description: string;
  language: string;
  tags: string[];
  author: User;
  content: string;
}

interface SpecDetailViewProps {
  spec: SpecDetail;
}

const SpecDetailView: React.FC<SpecDetailViewProps> = ({ spec }) => {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">{spec.title}</h1>
      <p>{spec.description}</p>
      <pre className="bg-gray-100 p-4 rounded">{spec.content}</pre>
    </div>
  );
};

export default SpecDetailView;
--- END OF FILE: src/components/SpecDetailView.tsx ---


--- START OF FILE: src/data.ts ---
/**
 * @file Mock data for development.
 * In a real application, this would come from an API.
 */
import { Spec } from './types';

export const mockSpecs: Spec[] = [
  {
    id: 'pyspark-attribution-model',
    name: 'pyspark-attribution-model',
    author: {
      id: 'user1',
      username: 'data-dave',
      avatarUrl: 'https://placehold.co/40x40/232a31/white?text=DD',
    },
    description: 'A PySpark pipeline for marketing attribution analysis in e-commerce.',
    longDescription: 'This specification outlines a complete, production-grade PySpark pipeline designed for marketing attribution analysis. It follows the composable map-reduce pattern for efficiency and testability, making it ideal for large-scale e-commerce datasets. The model supports last-touch attribution and can be extended for other models.',
    language: 'pyspark',
    tags: ['pyspark', 'ecommerce', 'marketing', 'attribution', 'big-data'],
    rating: 4.5,
    totalRatings: 128,
    version: '1.2.3',
    lastUpdated: '2 weeks ago',
    githubUrl: 'https://github.com/example/pyspark-attribution',
    tomlContent: `
language = "pyspark"
project_type = "ecommerce_attribution"
description = "A PySpark pipeline for marketing attribution analysis."

[project]
name = "pyspark-attribution-project"
version = "1.2.3"

[[datasets]]
name = "ad_impressions"
description = "Records of which users saw which ads and when."
schema_or_sample = "impression_id STRING, user_id STRING"
    `.trim(),
    versionHistory: [
      { version: '1.2.3', date: '2025-07-21', commitHash: 'a1b2c3d', commitUrl: '#' },
      { version: '1.2.2', date: '2025-07-18', commitHash: 'e4f5g6h', commitUrl: '#' },
      { version: '1.1.0', date: '2025-06-30', commitHash: 'i7j8k9l', commitUrl: '#' },
      { version: '1.0.0', date: '2025-06-01', commitHash: 'm0n1p2q', commitUrl: '#' },
    ],
  },
  // Add more mock specs here to populate the list
];

--- END OF FILE: src/data.ts ---


--- START OF FILE: src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-light-gray text-primary antialiased;
}

--- END OF FILE: src/index.css ---


--- START OF FILE: src/index.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
--- END OF FILE: src/index.tsx ---


--- START OF FILE: src/pages/BrowsePage.tsx ---
// src/pages/BrowsePage.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Spec } from '../types'; // We'll reuse the Spec type for cards for simplicity
import SpecCard from '../components/SpecCard';
import { Search, FileText, Plug } from 'lucide-react';

const BrowsePage: React.FC = () => {
  const [items, setItems] = useState<Spec[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();
  const location = useLocation();

  // Get the 'type' query parameter from the URL (e.g., ?type=specs)
  const queryParams = new URLSearchParams(location.search);
  const typeFilter = queryParams.get('type');

  useEffect(() => {
    const fetchAllItems = async () => {
      setLoading(true);
      setError(null);

      // Fetch specs and plugins in parallel
      const [specsResponse, pluginsResponse] = await Promise.all([
        supabase.from('specs').select(`*, profiles (username, avatar_url)`),
        supabase.from('plugins').select(`*, profiles (username, avatar_url)`)
      ]);
      
      let allItems: Spec[] = [];

      if (specsResponse.error) {
        console.error("Error fetching specs:", specsResponse.error);
        setError(specsResponse.error.message);
      } else {
        const formattedSpecs = specsResponse.data.map((spec: any) => ({
          id: spec.id,
          name: spec.name,
          description: spec.description,
          tags: spec.tags || ['spec'], // Add a default tag
          rating: spec.rating || 0,
          totalRatings: spec.total_ratings || 0,
          author: {
            id: spec.user_id,
            username: spec.profiles?.username || 'Unknown',
            avatarUrl: spec.profiles?.avatar_url || '',
          },
          // Dummy data for fields not in card view
          longDescription: '', language: '', version: '', lastUpdated: '', githubUrl: '', tomlContent: '', versionHistory: [],
        }));
        allItems = [...allItems, ...formattedSpecs];
      }

      if (pluginsResponse.error) {
        console.error("Error fetching plugins:", pluginsResponse.error);
        setError(pluginsResponse.error.message);
      } else {
        const formattedPlugins = pluginsResponse.data.map((plugin: any) => ({
          id: plugin.id,
          name: plugin.name,
          description: plugin.description,
          tags: [plugin.language, 'plugin'], // Add default tags
          rating: 0, // Plugins don't have ratings yet
          totalRatings: 0,
          author: {
            id: plugin.user_id,
            username: plugin.profiles?.username || 'Unknown',
            avatarUrl: plugin.profiles?.avatar_url || '',
          },
          // Dummy data
          longDescription: '', language: '', version: '', lastUpdated: '', githubUrl: '', tomlContent: '', versionHistory: [],
        }));
        allItems = [...allItems, ...formattedPlugins];
      }

      setItems(allItems);
      setLoading(false);
    };

    fetchAllItems();
  }, []);

  const handleCardClick = (id: string, type: 'spec' | 'plugin') => {
    navigate(`/${type}/${id}`);
  };

  // Filter by search term first, then by type from URL
  const filteredItems = items
    .filter(item =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    )
    .filter(item => {
      if (!typeFilter) return true; // If no type filter, show all
      return item.tags.includes(typeFilter.slice(0, -1)); // Match 'spec' or 'plugin' from 'specs' or 'plugins'
    });

  if (loading) {
    return <div className="text-center p-10">Loading...</div>;
  }

  if (error) {
    return <div className="text-center p-10 text-red-500">Error: {error}</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold text-primary text-center mb-8">Browse the Hub</h1>
      <div className="max-w-2xl mx-auto mb-12">
        <div className="relative">
          <input
            type="text"
            placeholder="Search by name, description, or tag (e.g., 'pyspark', 'plugin')..."
            className="w-full p-4 pr-12 text-lg text-primary rounded-md border-2 border-medium-gray focus:outline-none focus:border-accent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Search className="absolute top-1/2 right-4 -translate-y-1/2 text-gray-400" />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {filteredItems.length > 0 ? (
          filteredItems.map((item) => {
            const isPlugin = item.tags.includes('plugin');
            // We can reuse SpecCard, but ideally you'd have a generic Card component
            return <SpecCard key={item.id} spec={item} onClick={() => handleCardClick(item.id, isPlugin ? 'plugin' : 'spec')} />;
          })
        ) : (
          <p className="col-span-full text-center text-dark-gray">No items found matching your criteria.</p>
        )}
      </div>
    </div>
  );
};

export default BrowsePage;

--- END OF FILE: src/pages/BrowsePage.tsx ---


--- START OF FILE: src/pages/Home.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient'; // Assuming you might fetch top specs later
import { Spec } from '../types';
import SpecCard from '../components/SpecCard';
import { Package, Copy, Check } from 'lucide-react';

const Home: React.FC = () => {
  const navigate = useNavigate();
  const [specs, setSpecs] = useState<Spec[]>([]); // Ready for when you fetch real data
  const [copied, setCopied] = useState(false);

  /**
   * Handles copying text to the clipboard using a robust method that works
   * across different browser environments, including iframes.
   */
  const handleCopy = () => {
    const command = 'pip install boot-code';
    
    // Create a temporary textarea element to hold the text
    const textArea = document.createElement('textarea');
    textArea.value = command;
    
    // Style the textarea to be invisible
    textArea.style.position = 'absolute';
    textArea.style.left = '-9999px';
    
    document.body.appendChild(textArea);
    textArea.select();
    
    try {
      // Use the deprecated but highly compatible execCommand
      document.execCommand('copy');
      setCopied(true);
      // Reset the checkmark icon after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    } finally {
      // Clean up the temporary element
      document.body.removeChild(textArea);
    }
  };

  const handleSpecClick = (id: string) => {
    navigate(`/spec/${id}`);
  };

  // You can replace this useEffect with a real data fetch from Supabase
  useEffect(() => {
    // Example of how you might fetch top-rated specs in the future
    const fetchTopSpecs = async () => {
        const { data, error } = await supabase
            .from('specs')
            .select(`*, profiles(username, avatar_url)`)
            .order('rating', { ascending: false })
            .limit(3);

        if (data) {
            const formattedSpecs = data.map((spec: any) => ({
              id: spec.id,
              name: spec.name,
              description: spec.description,
              tags: spec.tags || [],
              rating: spec.rating,
              totalRatings: spec.total_ratings,
              author: {
                id: spec.user_id,
                username: spec.profiles?.username || 'Unknown',
                avatarUrl: spec.profiles?.avatar_url || '',
              },
              longDescription: '', language: '', version: '', lastUpdated: '', githubUrl: '', tomlContent: '', versionHistory: [],
            }));
            setSpecs(formattedSpecs);
        }
    };
    fetchTopSpecs();
  }, []);

  return (
    <main>
      {/* Hero Section with Installation Command */}
      <section className="bg-primary text-white py-20 px-4">
        <div className="container mx-auto text-center">
          <Package size={64} className="mx-auto mb-4 text-accent" />
          <h1 className="text-4xl md:text-5xl font-bold mb-4">Build-Passing Code, Instantly</h1>
          <p className="text-lg md:text-xl text-gray-300 mb-10 max-w-2xl mx-auto">
            Generate complete, production-ready code from simple specifications with the Boot AI engine.
          </p>
          
          {/* Installation Command Block */}
          <div className="max-w-md mx-auto bg-secondary rounded-lg p-4 flex items-center justify-between font-mono text-left shadow-lg">
            <span className="text-gray-300">$</span>
            <span className="text-white mx-4 flex-grow">pip install boot-code</span>
            <button onClick={handleCopy} className="text-gray-400 hover:text-white transition-colors" title="Copy to clipboard">
              {copied ? <Check size={20} className="text-green-400" /> : <Copy size={20} />}
            </button>
          </div>
        </div>
      </section>

      {/* Top Ranked Specs Section */}
      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold text-center mb-10">Featured Specs</h2>
        {specs.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {specs.map((spec) => (
                <SpecCard key={spec.id} spec={spec} onClick={handleSpecClick} />
            ))}
            </div>
        ) : (
            <p className="text-center text-dark-gray">No featured specs available yet. Be the first to submit one!</p>
        )}
      </section>
    </main>
  );
};

export default Home;

--- END OF FILE: src/pages/Home.tsx ---


--- START OF FILE: src/pages/PluginPage.tsx ---
// src/pages/PluginPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Github, User, Clock, Code } from 'lucide-react';
import ReactMarkdown from 'react-markdown';

// Define the type for a plugin's data structure
interface Plugin {
  id: string;
  name: string;
  description: string;
  language: string;
  version: string;
  githubUrl: string;
  author: {
    id: string;
    username: string;
    avatarUrl: string;
  };
  createdAt: string;
}

const GITHUB_URL_REGEX = /https:\/\/github\.com\/([^\/]+)\/([^\/]+)/;

const PluginPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [plugin, setPlugin] = useState<Plugin | null>(null);
  const [readmeContent, setReadmeContent] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPluginData = async () => {
      if (!id) return;
      setLoading(true);
      setError(null);

      // 1. Fetch plugin metadata from Supabase
      const { data, error: dbError } = await supabase
        .from('plugins')
        .select(`*, profiles (username, avatar_url)`)
        .eq('id', id)
        .single();

      if (dbError) {
        setError(dbError.message);
        setLoading(false);
        return;
      }
      
      const formattedPlugin: Plugin = {
        id: data.id,
        name: data.name,
        description: data.description,
        language: data.language,
        version: data.version,
        githubUrl: data.github_url,
        createdAt: new Date(data.created_at).toLocaleDateString(),
        author: {
          id: data.user_id,
          username: data.profiles?.username || 'Unknown',
          avatarUrl: data.profiles?.avatar_url || '',
        },
      };
      setPlugin(formattedPlugin);

      // 2. Fetch README.md from the plugin's GitHub repo
      const match = formattedPlugin.githubUrl.match(GITHUB_URL_REGEX);
      if (match) {
        const [, owner, repo] = match;
        const readmeUrl = `https://raw.githubusercontent.com/${owner}/${repo}/main/README.md`;
        try {
          const readmeResponse = await fetch(readmeUrl);
          if (readmeResponse.ok) {
            const readmeText = await readmeResponse.text();
            setReadmeContent(readmeText);
          } else {
            setReadmeContent('Could not load README.md from the repository.');
          }
        } catch (fetchError) {
          setReadmeContent('Failed to fetch README.md.');
        }
      }
      setLoading(false);
    };

    fetchPluginData();
  }, [id]);

  if (loading) {
    return <div className="text-center p-10">Loading plugin details...</div>;
  }

  if (error || !plugin) {
    return (
      <div className="container mx-auto p-8 text-center">
        <h1 className="text-3xl font-bold text-primary mb-4">Plugin Not Found</h1>
        <p className="text-dark-gray">The plugin you are looking for does not exist. Error: {error}</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 md:p-8">
      <div className="bg-white p-6 rounded-lg shadow-md border border-medium-gray">
        {/* Plugin Header */}
        <div className="flex flex-col md:flex-row justify-between items-start mb-4">
          <div>
            <h1 className="text-3xl font-bold text-primary flex items-center">
              <Code className="mr-3 text-accent"/> {plugin.name}
            </h1>
            <div className="flex items-center text-dark-gray mt-3 text-sm space-x-4">
              <div className="flex items-center">
                <User size={14} className="mr-1.5"/>
                <img src={plugin.author.avatarUrl} alt={plugin.author.username} className="w-5 h-5 rounded-full mr-2" />
                <span>{plugin.author.username}</span>
              </div>
              <div className="flex items-center">
                <Clock size={14} className="mr-1.5"/>
                <span>Version {plugin.version}</span>
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-4 mt-4 md:mt-0">
            <a href={plugin.githubUrl} target="_blank" rel="noopener noreferrer" className="flex items-center bg-primary text-white px-4 py-2 rounded-md hover:bg-secondary transition-colors">
              <Github size={16} className="mr-2"/> View on GitHub
            </a>
          </div>
        </div>
        <p className="text-dark-gray mb-6">{plugin.description}</p>
        <div className="border-t border-medium-gray my-6"></div>
        
        {/* Rendered README Content */}
        <article className="prose lg:prose-xl max-w-none">
            <ReactMarkdown>{readmeContent}</ReactMarkdown>
        </article>
      </div>
    </div>
  );
};

export default PluginPage;

--- END OF FILE: src/pages/PluginPage.tsx ---


--- START OF FILE: src/pages/SpecPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Spec } from '../types';
import SpecDetailView from '../components/SpecDetailView';
import { Star, Github, Code, Clock, User } from 'lucide-react';

const SpecPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [spec, setSpec] = useState<Spec | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchSpec = async () => {
      if (!id) return;
      setLoading(true);
      const { data, error } = await supabase
        .from('specs')
        .select(`
          *,
          profiles (
            username,
            avatar_url
          )
        `)
        .eq('id', id)
        .single();

      if (error) {
        setError(error.message);
        console.error("Error fetching spec:", error);
      } else {
        const formattedSpec: Spec = {
            id: data.id,
            name: data.name,
            description: data.description,
            longDescription: data.long_description || data.description,
            language: data.language,
            tags: data.tags || [],
            rating: data.rating,
            totalRatings: data.total_ratings,
            version: data.version || '1.0.0',
            lastUpdated: new Date(data.created_at).toLocaleDateString(),
            githubUrl: data.github_url,
            tomlContent: data.toml_content,
            author: {
                id: data.user_id,
                username: data.profiles.username,
                avatarUrl: data.profiles.avatar_url,
            },
            versionHistory: [] // Can be implemented later
        };
        setSpec(formattedSpec);
      }
      setLoading(false);
    };

    fetchSpec();
  }, [id]);

  if (loading) {
    return <div className="text-center p-10">Loading spec details...</div>;
  }

  if (error || !spec) {
    return (
      <div className="container mx-auto p-8 text-center">
        <h1 className="text-3xl font-bold text-primary mb-4">Spec Not Found</h1>
        <p className="text-dark-gray">The specification you are looking for does not exist. Error: {error}</p>
      </div>
    );
  }

  const specDetailForView = {
    id: spec.id,
    title: spec.name,
    description: spec.longDescription,
    language: spec.language,
    tags: spec.tags,
    author: {
        id: spec.author.id,
        username: spec.author.username,
        avatar_url: spec.author.avatarUrl,
    },
    content: spec.tomlContent,
  };

  return (
    <div className="container mx-auto p-4 md:p-8">
      <div className="bg-white p-6 rounded-lg shadow-md border border-medium-gray">
        <div className="flex flex-col md:flex-row justify-between items-start mb-4">
          <div>
            <h1 className="text-3xl font-bold text-primary flex items-center">
                <Code className="mr-3 text-accent"/> {spec.name}
            </h1>
            <div className="flex items-center text-dark-gray mt-3 text-sm space-x-4">
              <div className="flex items-center">
                <User size={14} className="mr-1.5"/>
                <img src={spec.author.avatarUrl} alt={spec.author.username} className="w-5 h-5 rounded-full mr-2" />
                <span>{spec.author.username}</span>
              </div>
              <div className="flex items-center">
                <Clock size={14} className="mr-1.5"/>
                <span>Updated {spec.lastUpdated}</span>
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-4 mt-4 md:mt-0">
            <a href={spec.githubUrl} target="_blank" rel="noopener noreferrer" className="flex items-center bg-primary text-white px-4 py-2 rounded-md hover:bg-secondary transition-colors">
                <Github size={16} className="mr-2"/> View on GitHub
            </a>
            <div className="flex items-center bg-light-gray px-3 py-2 rounded-md border border-medium-gray">
              <Star size={20} className="text-yellow-500 mr-2" />
              <span className="font-bold text-lg">{spec.rating.toFixed(1)}</span>
              <span className="text-sm text-dark-gray ml-1">({spec.totalRatings})</span>
            </div>
          </div>
        </div>

        <div className="border-t border-medium-gray my-6"></div>

        <p className="text-dark-gray mb-6">{spec.longDescription}</p>

        <div className="flex flex-wrap gap-2 mb-6">
          {spec.tags.map(tag => (
            <span key={tag} className="bg-gray-200 text-dark-gray text-xs font-semibold px-2.5 py-0.5 rounded-full">
              {tag}
            </span>
          ))}
        </div>

        <SpecDetailView spec={specDetailForView} />
      </div>
    </div>
  );
};

export default SpecPage;

--- END OF FILE: src/pages/SpecPage.tsx ---


--- START OF FILE: src/pages/SubmitPage.tsx ---
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Github, FileText, Plug } from 'lucide-react';

type SubmissionType = 'spec' | 'plugin';

/**
 * A reusable component for the large clickable selection cards.
 * It now visually adapts based on whether it's selected or another option is.
 * @param {object} props - The component props.
 */
const SubmissionChoice: React.FC<{
  type: SubmissionType;
  icon: React.ReactNode;
  title: string;
  description: string;
  onSelect: () => void;
  isSelected: boolean;
  isDisabled: boolean;
}> = ({ type, icon, title, description, onSelect, isSelected, isDisabled }) => {
  const baseClasses = "flex-1 p-8 border-2 rounded-lg text-center transition-all duration-200";
  const stateClasses = isSelected
    ? 'border-accent bg-light-gray'
    : isDisabled
    ? 'opacity-50 cursor-not-allowed'
    : 'border-medium-gray cursor-pointer hover:border-accent hover:bg-light-gray';

  return (
    <div
      onClick={onSelect}
      className={`${baseClasses} ${stateClasses}`}
    >
      <div className="w-16 h-16 mx-auto bg-accent text-white rounded-full flex items-center justify-center mb-4">
        {icon}
      </div>
      <h2 className="text-2xl font-bold text-primary">{title}</h2>
      <p className="text-dark-gray mt-2">{description}</p>
    </div>
  );
};

/**
 * The form component for submitting a GitHub URL.
 * It's now simpler and doesn't handle navigation back.
 * @param {object} props - The component props.
 * @param {SubmissionType} props.type - The type of submission ('spec' or 'plugin').
 */
const SubmissionForm: React.FC<{ type: SubmissionType }> = ({ type }) => {
  const [githubUrl, setGithubUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      setError("You must be logged in to submit.");
      setLoading(false);
      return;
    }

    const functionName = type === 'spec' 
      ? 'submit-spec-from-github' 
      : 'submit-plugin-from-github';

    try {
      const { data, error: invokeError } = await supabase.functions.invoke(functionName, {
        body: { githubUrl },
      });

      if (invokeError) throw invokeError;
      
      const newId = data.data.id;
      setSuccess('Submission successful! Redirecting...');
      setTimeout(() => navigate(type === 'spec' ? `/spec/${newId}` : `/plugin/${newId}`), 2000);

    } catch (err: any) {
      console.error(err);
      setError(err.message || 'An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <label htmlFor="githubUrl" className="block text-primary font-bold mb-2 text-left">
          GitHub Repository URL
        </label>
        <input
          type="url"
          id="githubUrl"
          value={githubUrl}
          onChange={(e) => setGithubUrl(e.target.value)}
          className="w-full p-3 text-lg text-primary rounded-md border-2 border-medium-gray focus:outline-none focus:border-accent"
          placeholder="https://github.com/user/repo-name"
          required
        />
        <p className="text-sm text-dark-gray mt-2 text-left">
          {type === 'spec'
            ? <>Repository must contain a <code className="font-mono bg-gray-200 p-1 rounded-md">spec.toml</code> file in the root.</>
            : <>Repository must contain a plugin manifest (e.g., <code className="font-mono bg-gray-200 p-1 rounded-md">Cargo.toml</code>, <code className="font-mono bg-gray-200 p-1 rounded-md">pyproject.toml</code>) in the root.</>}
        </p>
      </div>

      {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
      {success && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">{success}</div>}

      <button
        type="submit"
        disabled={loading}
        className="w-full bg-accent hover:bg-red-700 text-white font-bold py-3 px-4 rounded-md transition-colors disabled:bg-gray-400"
      >
        {loading ? 'Submitting...' : `Submit ${type === 'spec' ? 'Spec' : 'Plugin'}`}
      </button>
    </form>
  );
};

/**
 * The main page component that controls the submission flow on a single page.
 */
const SubmitPage: React.FC = () => {
  const [selectedType, setSelectedType] = useState<SubmissionType | null>(null);

  /**
   * Handles the selection of a submission type.
   * If the clicked type is already selected, it deselects it.
   * Otherwise, it selects the new type.
   * @param {SubmissionType} type - The type that was clicked.
   */
  const handleSelect = (type: SubmissionType) => {
    if (selectedType === type) {
      setSelectedType(null); // Deselect if clicking the same one again
    } else {
      setSelectedType(type);
    }
  };

  return (
    <div className="container mx-auto max-w-4xl px-4 py-16">
      <div className="bg-white p-8 md:p-12 rounded-lg shadow-lg border border-medium-gray">
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-primary">What would you like to submit?</h1>
          <p className="text-dark-gray mt-2 text-lg">Choose a submission type to get started.</p>
        </div>
        <div className="flex flex-col md:flex-row gap-8">
          <SubmissionChoice
            type="spec"
            icon={<FileText size={32} />}
            title="Submit a Spec"
            description="Share a reusable `spec.toml` file for generating projects."
            onSelect={() => handleSelect('spec')}
            isSelected={selectedType === 'spec'}
            isDisabled={selectedType !== null && selectedType !== 'spec'}
          />
          <SubmissionChoice
            type="plugin"
            icon={<Plug size={32} />}
            title="Submit a Plugin"
            description="Add a new language plugin (e.g., `boot-rust`) to the ecosystem."
            onSelect={() => handleSelect('plugin')}
            isSelected={selectedType === 'plugin'}
            isDisabled={selectedType !== null && selectedType !== 'plugin'}
          />
        </div>

        {/* Conditionally render the form below the choices with a smooth transition */}
        <div className={`transition-all duration-500 ease-in-out overflow-hidden ${selectedType ? 'max-h-96 mt-10' : 'max-h-0'}`}>
          {selectedType && <SubmissionForm type={selectedType} />}
        </div>
      </div>
    </div>
  );
};

export default SubmitPage;

--- END OF FILE: src/pages/SubmitPage.tsx ---


--- START OF FILE: src/sql/plugins.sql ---
-- SQL for 'plugins' Table
-- This table stores community-submitted plugins for the bootcode ecosystem.

CREATE TABLE public.plugins (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  language TEXT, -- e.g., 'rust', 'python'
  version TEXT,
  github_url TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.plugins ENABLE ROW LEVEL SECURITY;

-- Policies for plugins
CREATE POLICY "Plugins are viewable by everyone."
  ON public.plugins FOR SELECT
  USING ( true );

CREATE POLICY "Authenticated users can insert plugins."
  ON public.plugins FOR INSERT
  WITH CHECK ( auth.role() = 'authenticated' );

CREATE POLICY "Users can update their own plugins."
  ON public.plugins FOR UPDATE
  USING ( auth.uid() = user_id );

CREATE POLICY "Users can delete their own plugins."
  ON public.plugins FOR DELETE
  USING ( auth.uid() = user_id );

--- END OF FILE: src/sql/plugins.sql ---


--- START OF FILE: src/sql/profiles.sql ---
-- SQL for 'profiles' Table
-- This table stores public user data.

CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Function to populate profiles table on new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'user_name',
    new.raw_user_meta_data->>'avatar_url'
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the function when a new user is created
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Enable Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles
CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING ( true );

CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK ( auth.uid() = id );

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING ( auth.uid() = id );

--- END OF FILE: src/sql/profiles.sql ---


--- START OF FILE: src/sql/specs.sql ---
-- SQL for 'specs' Table
-- Stores all the community-submitted specifications.

CREATE TABLE public.specs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  long_description TEXT,
  language TEXT,
  project_type TEXT,
  tags TEXT[],
  rating NUMERIC(2, 1) DEFAULT 0.0,
  total_ratings INT DEFAULT 0,
  version TEXT,
  github_url TEXT UNIQUE,
  toml_content TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.specs ENABLE ROW LEVEL SECURITY;

-- Policies for specs
CREATE POLICY "Specs are viewable by everyone."
  ON public.specs FOR SELECT
  USING ( true );

CREATE POLICY "Authenticated users can insert specs."
  ON public.specs FOR INSERT
  WITH CHECK ( auth.role() = 'authenticated' );

CREATE POLICY "Users can update their own specs."
  ON public.specs FOR UPDATE
  USING ( auth.uid() = user_id );

CREATE POLICY "Users can delete their own specs."
  ON public.specs FOR DELETE
  USING ( auth.uid() = user_id );

--- END OF FILE: src/sql/specs.sql ---


--- START OF FILE: src/supabaseClient.ts ---
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Supabase URL and Anon Key must be provided in .env file');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
--- END OF FILE: src/supabaseClient.ts ---


--- START OF FILE: src/types.ts ---
/**
 * @file Centralized type definitions for the application.
 */

export interface User {
    id: string;
    username: string;
    avatarUrl: string;
  }
  
  export interface VersionHistoryItem {
    version: string;
    date: string;
    commitHash: string;
    commitUrl: string;
  }
  
  export interface Spec {
    id: string;
    name: string;
    author: User;
    description: string;
    longDescription: string;
    language: string;
    tags: string[];
    rating: number;
    totalRatings: number;
    version: string;
    lastUpdated: string;
    githubUrl: string;
    tomlContent: string;
    versionHistory: VersionHistoryItem[];
  }
  
--- END OF FILE: src/types.ts ---


--- START OF FILE: supabase/.temp/cli-latest ---
v2.33.9
--- END OF FILE: supabase/.temp/cli-latest ---


--- START OF FILE: supabase/.temp/gotrue-version ---
v2.177.0
--- END OF FILE: supabase/.temp/gotrue-version ---


--- START OF FILE: supabase/.temp/pooler-url ---
postgresql://postgres.fgcuyeytouwpsehhoisf:[YOUR-PASSWORD]@aws-0-eu-west-2.pooler.supabase.com:6543/postgres
--- END OF FILE: supabase/.temp/pooler-url ---


--- START OF FILE: supabase/.temp/postgres-version ---
17.4.1.064
--- END OF FILE: supabase/.temp/postgres-version ---


--- START OF FILE: supabase/.temp/project-ref ---
fgcuyeytouwpsehhoisf
--- END OF FILE: supabase/.temp/project-ref ---


--- START OF FILE: supabase/.temp/rest-version ---
v12.2.12
--- END OF FILE: supabase/.temp/rest-version ---


--- START OF FILE: supabase/.temp/storage-version ---
custom-metadata
--- END OF FILE: supabase/.temp/storage-version ---


--- START OF FILE: supabase/functions/_shared/cors.ts ---
// supabase/functions/_shared/cors.ts
// These are the standard CORS headers for Supabase Edge Functions.
// They allow requests from any origin and permit the necessary headers
// for the Supabase client library to work correctly.

export const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  };
  
--- END OF FILE: supabase/functions/_shared/cors.ts ---


--- START OF FILE: supabase/functions/submit-plugin-from-github/index.ts ---
// src/pages/SubmitPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Github, FileText, Plug } from 'lucide-react';

type SubmissionType = 'spec' | 'plugin';

const SubmitPage: React.FC = () => {
  const [submissionType, setSubmissionType] = useState<SubmissionType>('spec');
  const [githubUrl, setGithubUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      setError("You must be logged in to submit.");
      setLoading(false);
      return;
    }

    const functionName = submissionType === 'spec' 
      ? 'submit-spec-from-github' 
      : 'submit-plugin-from-github';

    try {
      const { data, error: invokeError } = await supabase.functions.invoke(functionName, {
        body: { githubUrl },
      });

      if (invokeError) throw invokeError;
      
      const newId = data.data.id;
      setSuccess('Submission successful! Redirecting...');
      // Navigate to the correct page based on type
      setTimeout(() => navigate(submissionType === 'spec' ? `/spec/${newId}` : `/plugin/${newId}`), 2000);

    } catch (err: any) {
      console.error(err);
      setError(err.message || 'An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto max-w-2xl px-4 py-16">
      <div className="bg-white p-8 rounded-lg shadow-md border border-medium-gray">
        <div className="text-center mb-8">
          <Github size={48} className="mx-auto text-primary mb-4" />
          <h1 className="text-3xl font-bold text-primary">Submit to the Hub</h1>
          <p className="text-dark-gray mt-2">Share your spec or plugin with the community.</p>
        </div>

        {/* Submission Type Toggle */}
        <div className="flex justify-center mb-8">
          <div className="flex border-2 border-accent rounded-lg p-1">
            <button
              onClick={() => setSubmissionType('spec')}
              className={`flex items-center px-4 py-2 rounded-md transition-colors ${submissionType === 'spec' ? 'bg-accent text-white' : 'text-accent'}`}
            >
              <FileText size={16} className="mr-2"/> Spec
            </button>
            <button
              onClick={() => setSubmissionType('plugin')}
              className={`flex items-center px-4 py-2 rounded-md transition-colors ${submissionType === 'plugin' ? 'bg-accent text-white' : 'text-accent'}`}
            >
              <Plug size={16} className="mr-2"/> Plugin
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="githubUrl" className="block text-primary font-bold mb-2">
              GitHub Repository URL
            </label>
            <input
              type="url"
              id="githubUrl"
              value={githubUrl}
              onChange={(e) => setGithubUrl(e.target.value)}
              className="w-full p-3 text-lg text-primary rounded-md border-2 border-medium-gray focus:outline-none focus:border-accent"
              placeholder="https://github.com/user/repo-name"
              required
            />
             <p className="text-sm text-dark-gray mt-2">
              {submissionType === 'spec'
                ? "Repository must contain a `spec.toml` file in the root."
                : "Repository must contain a `Cargo.toml` file in the root."}
            </p>
          </div>

          {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
          {success && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">{success}</div>}

          <button
            type="submit"
            disabled={loading}
            className="w-full bg-accent hover:bg-red-700 text-white font-bold py-3 px-4 rounded-md transition-colors disabled:bg-gray-400"
          >
            {loading ? 'Submitting...' : `Submit ${submissionType === 'spec' ? 'Spec' : 'Plugin'}`}
          </button>
        </form>
      </div>
    </div>
  );
};

export default SubmitPage;

--- END OF FILE: supabase/functions/submit-plugin-from-github/index.ts ---


--- START OF FILE: supabase/functions/submit-spec-from-github/index.ts ---
// supabase/functions/submit-spec-from-github/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

// Regular expression to parse GitHub URLs
const GITHUB_URL_REGEX = /https:\/\/github\.com\/([^\/]+)\/([^\/]+)/;

// Function to parse TOML content
function parseToml(tomlContent: string): any {
  // A simple, dependency-free TOML parser.
  const data: any = { project: {}, datasets: [], metrics: [], outputDatasets: [] };
  let currentSection: any[] | null = null;
  let currentSectionName: string | null = null;

  tomlContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed.startsWith('[[') && trimmed.endsWith(']]')) {
      const sectionName = trimmed.slice(2, -2);
      currentSectionName = sectionName;
      if (!data[sectionName]) {
        data[sectionName] = [];
      }
      currentSection = data[sectionName];
      currentSection.push({});
    } else if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
        const sectionName = trimmed.slice(1, -1);
        currentSectionName = sectionName;
        data[sectionName] = {};
        currentSection = null; // Reset section context
    } else if (trimmed.includes('=')) {
      const [key, value] = trimmed.split('=').map(s => s.trim());
      const parsedValue = value.replace(/"/g, '');
      
      if (currentSection) {
        currentSection[currentSection.length - 1][key] = parsedValue;
      } else if (currentSectionName) {
        data[currentSectionName][key] = parsedValue;
      } else {
        data[key] = parsedValue;
      }
    }
  });
  return data;
}


Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { githubUrl } = await req.json();
    const match = githubUrl.match(GITHUB_URL_REGEX);

    if (!match) {
      throw new Error('Invalid GitHub URL format.');
    }

    const [, owner, repo] = match;
    // Updated to look for spec.toml specifically
    const specUrl = `https://raw.githubusercontent.com/${owner}/${repo}/main/spec.toml`;

    // Fetch the spec.toml file from the repository
    const specResponse = await fetch(specUrl);
    if (!specResponse.ok) {
      throw new Error(`Could not fetch spec.toml from ${githubUrl}. Make sure it exists in the main branch.`);
    }
    const tomlContent = await specResponse.text();
    const specData = parseToml(tomlContent);

    // Create a Supabase client with the service role key to bypass RLS
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );
    
    // Get the authenticated user's ID from the request's Authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
        throw new Error("Missing Authorization header.");
    }
    const { data: { user } } = await createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_ANON_KEY') ?? '',
        { global: { headers: { Authorization: authHeader } } }
    ).auth.getUser();

    if (!user) {
        throw new Error("User not authenticated.");
    }

    // **FIX: Ensure a profile exists for the user before proceeding.**
    const { data: profile } = await supabaseAdmin
      .from('profiles')
      .select('id')
      .eq('id', user.id)
      .single();

    if (!profile) {
        // Profile doesn't exist, so create it.
        const { error: insertProfileError } = await supabaseAdmin.from('profiles').insert({
            id: user.id,
            username: user.user_metadata.user_name,
            avatar_url: user.user_metadata.avatar_url,
        });
        if (insertProfileError) {
            console.error('Error creating profile:', insertProfileError);
            throw new Error(`Failed to create user profile: ${insertProfileError.message}`);
        }
    }

    // Insert the parsed data into the 'specs' table
    const { data, error } = await supabaseAdmin.from('specs').insert({
      user_id: user.id,
      name: specData.project.name,
      description: specData.description,
      language: specData.language,
      project_type: specData.project_type,
      version: specData.project.version,
      github_url: githubUrl,
      toml_content: tomlContent,
    }).select().single();

    if (error) {
      console.error('Supabase insert error:', error);
      throw error;
    }

    return new Response(JSON.stringify({ data }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });
  } catch (error) {
    console.error('Function error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});

--- END OF FILE: supabase/functions/submit-spec-from-github/index.ts ---


--- START OF FILE: tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        'primary': '#232a31',
        'secondary': '#313a43',
        'accent': '#c53929',
        'light-gray': '#f6f8fa',
        'medium-gray': '#e1e4e8',
        'dark-gray': '#586069',
      },
      fontFamily: {
        sans: ['"Inter"', 'sans-serif'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}

--- END OF FILE: tailwind.config.js ---


--- START OF FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@/*": [
        "*"
      ]
    },
    "strict": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
--- END OF FILE: tsconfig.json ---


--- START OF FILE: tsconfig.node.json ---
{
    "compilerOptions": {
      "composite": true,
      "skipLibCheck": true,
      "module": "ESNext",
      "moduleResolution": "bundler"
    },
    "include": ["vite.config.mts"]
  }
--- END OF FILE: tsconfig.node.json ---


--- START OF FILE: vite.config.mts ---
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tsconfigPaths from 'vite-tsconfig-paths';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  build: {
    target: 'esnext',
  },
});
--- END OF FILE: vite.config.mts ---
